scale_x_discrete() +
xlab("Year_of_Service") +
ylab("Number Serviced") +
ggtitle('Individual vs Family by Year')
})
```{r}
renderPlot({
ggplot(Indv_Family_group_UMD_df, aes(x=Year_of_Service, y=n, group=Indv_Family)) +
geom_line(aes(color=Indv_Family)) +
scale_x_discrete() +
xlab("Year_of_Service") +
ylab("Number Serviced") +
ggtitle('Individual vs Family by Year')
})
```
```{r}
renderPlot({
ggplot(Indv_Family_group_UMD_df, aes(x=Year_of_Service, y=n, group=Indv_Family)) +
geom_line(aes(color=Indv_Family)) +
scale_x_discrete() +
xlab("Year_of_Service") +
ylab("Number Serviced") +
ggtitle('Individual vs Family by Year')
})
```
output$plot42 <- renderPlot({
client_plot2(input$client)
})
library(shiny)
library(tidyverse)
source("helper_functions.R",local = F)
ui <- navbarPage("Project 2",
tabPanel("Background",
fluidPage(
titlePanel("Background"),
sidebarLayout(
sidebarPanel(
"About the project"
),
mainPanel(
textOutput(outputId = "pre0"),
textOutput(outputId = "pre1"),
textOutput(outputId = "pre2"),
textOutput(outputId = "pre3"),
textOutput(outputId = "pre4")
)
)
)
),
tabPanel("Q1",
fluidPage(
titlePanel("Trend"),
sidebarLayout(
sidebarPanel(
h3(textOutput(outputId = "text1")),
# Input
selectInput("trend", label = h5("Select a variable"),
choices = list("People served" = "Food Provided for", "Food" = "Food Pounds",
"Clothes" = "Clothing Items", "Diapers" = "Diapers",
"Hygiene Kits" = "Hygiene Kits", "School Kits" = "School Kits",
"Financial Support" = "Financial Support"),
selected = 1),
# Output
textOutput("value1")
),
mainPanel(
plotOutput(outputId = "plot1")
)
)
)
),
tabPanel("Q2",
fluidPage(
titlePanel("Relationship"),
sidebarLayout(
sidebarPanel(
h3(textOutput(outputId = "text2")),
# Input
selectInput("relation", label = h5("Select a variable"),
choices = list("Food" = "Food Pounds",
"Clothes" = "Clothing Items"),
selected = 1),
# Output
textOutput("value2")
),
mainPanel(
plotOutput(outputId = "plot2")
)
)
)
),
tabPanel("Q3",
fluidPage(
titlePanel("Average Amounts"),
sidebarLayout(
sidebarPanel(
h3(textOutput(outputId = "text3")),
# Input
selectInput("average", label = h5("Select a variable"),
choices = list("Food" = "Food Pounds",
"Clothes" = "Clothing Items"),
selected = 1),
# Output
textOutput("value3")
),
mainPanel(
plotOutput(outputId = "plot3"),
textOutput(outputId = "text_avrg")
)
)
)
),
tabPanel("Q4",
fluidPage(
titlePanel("Specific Analysis"),
sidebarLayout(
sidebarPanel(
h3(textOutput(outputId = "text4")),
# Input
numericInput("client", label = h5("Input a client file number"), 3502),
# Output
textOutput(outputId = "value4")
),
mainPanel(
plotOutput(outputId = "plot41"),
plotOutput(outputId = "plot42")
)
)
)
)
)
server <- function(input, output) {
output$pre0 <- renderText("This project is a continuity of my project 1. I will focus on the four questions shown as below.")
output$pre1 <- renderText("1. The trend of the change for different variables that people choose over time (from 2005 till now).")
output$pre2 <- renderText("2. The relationships between number of people served and food pounds/clothing items. ")
output$pre3 <- renderText("3. The average amounts of food pounds/clothing items that per person served per visit need. ")
output$pre4 <- renderText("4. Specific analysis for individuals.")
output$text1 <- renderText("1. Show the trends of different variables over time")
output$value1 <- renderPrint({
paste("You have selected", input$trend)
})
output$plot1 <- renderPlot({
trend(input$trend)
})
output$text2 <- renderText("2. Show the potential relationships between different variables.")
output$value2 <- renderPrint({
paste("You have selected", input$relation)
})
output$plot2 <- renderPlot({
relation(input$relation)
})
output$text3 <- renderText("3. Show the average amount of food/clothes per person per visit getting.")
output$value3 <- renderPrint({
paste("You have selected", input$average)
})
output$plot3 <- renderPlot({
average_plot(input$average)
})
output$text_avrg <- renderText(paste("The average amount of ", input$average,
"from 2000 and from 2015 till now are", average_num(input$average)[1],
",", average_num(input$average)[2], ", respectively."))
output$text4 <- renderText("4. Specific analysis for individuals.")
output$value4 <- renderPrint({
client_check(input$client)
})
output$plot41 <- renderPlot({
client_plot1(input$client)
})
output$plot42 <- renderPlot({
client_plot2(input$client)
})
}
shinyApp(ui = ui, server = server)
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
shiny::runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
#Individuals Versus Families (2007-2016)
indv_fam_plot = ggplot(final_PIT_df, aes(x=Indv_Family, y=n)) +
geom_bar(stat="identity", aes(fill=Indv_Family)) +
xlab("Family Size") +
ggtitle('Durham PIT - Individuals Versus Families (2007-2016)')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
runApp('Bios611/bios611-projects-fall-2019-mlfoste1/Project_2')
master_df = read_csv("https://raw.githubusercontent.com/datasci611/bios611-projects-fall-2019-mlfoste1/master/Project_3/data/master.csv", na = '**')
library(tidyverse)
library(dplyr)
library(stringr)
master_df = read_csv("https://raw.githubusercontent.com/datasci611/bios611-projects-fall-2019-mlfoste1/master/Project_3/data/master.csv", na = '**')
view(master_df)
view(master_df)
master_race_yr = ggplot(master_df, aes(x=Indv_Family, y=n)) +
geom_bar(stat="identity", aes(fill=Indv_Family)) +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr
master_race_yr = ggplot(master_df, aes(x=Indv_Family, y=n)) +
geom_bar(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr = ggplot(master_df, aes(x=Race, y=n)) +
geom_bar(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
#Race by year
master_race_yr = ggplot(master_df, aes(x=Race)) +
geom_bar(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr = ggplot(master_df, aes(x=Race)) +
geom_histogram(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr = ggplot(master_df, aes(x=Race)) +
geom_histogram(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr = ggplot(master_df, aes(y=Race)) +
geom_histogram(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
#Race by year
master_race_yr = ggplot(master_df, aes(x=1. y=Race)) +
geom_histogram(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
#Race by year
master_race_yr = ggplot(master_df, aes(x=1, y=Race)) +
geom_histogram(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr = ggplot(master_df, aes(y=Race)) +
geom_histogram(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr = ggplot(master_df, aes(x=Race)) +
geom_histogram(stat="identity") +
xlab("Race") +
ggtitle('Race Distribution')
master_race_yr
master_race_yr = ggplot(tally(group_by(Race)),
aes(x = Race, y = n, fill = Race)) +
geom_bar(stat="identity") + labs(fill="Race")
master_race_yr
master_df$n <- as.numeric(master_df$count_)
master_df$n <- as.numeric(master_df$count_)
Durham_PIT_df = read_csv("https://raw.githubusercontent.com/datasci611/bios611-projects-fall-2019-mlfoste1/master/Project1/data/external/Durham%20County_Homeless_Point%20In%20Time.csv", na = '**')
view(Durham_PIT_df)
#Convert date field to date data type; Remove unrelated fields; limit date range to 2006 to 2016 to match open dataset; limit food_provided_for to 1 to 10
final_PIT_df = Durham_PIT_df %>%
select('year','measures','count_') %>%
filter(measures=="Homeless Individuals" | measures=="Homeless People in Families")
view(final_PIT_df)
#group
final_PIT_df$Indv_Family<-NA
final_PIT_df$Indv_Family[final_PIT_df$measures=="Homeless Individuals"] <- "Individual"
final_PIT_df$Indv_Family[final_PIT_df$measures=="Homeless People in Families"] <- "Family"
final_PIT_df$Year_of_service <- cut(final_PIT_df$year, breaks = c(2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016), labels=c("2007","2008","2009","2010","2011","2012","2013","2014","2015","2016"))
final_PIT_df$n <- as.numeric(final_PIT_df$count_)
view(Durham_PIT_df)
---
title: "Veterans With Disabilities"
author: "Meagan Foster"
date: "December 1, 2019"
output: html_document
runtime: shiny
---
```{r include=FALSE}
source('master_df.R')
```
## Overview
The "UMD_Services_Provided_20190719.tsv" (UMD) dataset provided by the Urban Ministry of Durham. This data was compared to the Durham County Point-In-Time (PIT) dataset to evaluate the volume of clients serviced by Urban Ministry compared to the number of reported homeless people in Durham county.
The UMD dataset was reduced to dates of service occurring between 2007 and 2016 to match the date range avaialable in the PIT dataset.  The client data in UMD dataset was then categorized as "Indivual" or "Family".  These data was compared in total service vs reported and totals per year.
Under the U.S. Census Bureau definition, family households consist of two or more individuals who are related by birth, marriage, or adoption, although they also may include other unrelated people. Nonfamily households consist of people who live alone or who share their residence with unrelated individuals.
See ReadMe.md for more information on data sources and project structure.
##UMD Data Summary
```{r}
#Veteran Status by Gender
veteranstatus_gender_plot
```
##Conclusion
Conduct a better count nationally. HUD's count should:
.Be nationally coordinated with a more consistent and morerigorous methodology. This and requires appropriate fundinglevels in order to get more useful data.
.Include estimation techniques designed and overseen byexperts in order to quantify the number of homeless individualsthat were missed during the count.
.Include all people experiencing homelessness, includingindividuals that are institutionalized in hospitals and jails orprisons
---
title: "UMD Clients Serviced Versus Durham County Point-In-Time Survey"
author: "Meagan Foster"
date: "September 25, 2019"
output: html_document
runtime: shiny
---
```{r global, include=FALSE}
library(tidyverse)
library(dplyr)
library(stringr)
UMD_df = read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv", na = '**')
spaceless <- function(x) {colnames(x) <- gsub(" ", "_", colnames(x));x}
rename_UMD_df <- spaceless(UMD_df)
final_UMD_df = rename_UMD_df %>%
mutate(Date_of_service = as.Date(UMD_df$Date, "%m/%d/%Y")) %>%
select(-'Date', -'Client_File_Merge', -'Bus_Tickets_(Number_of)', -'Notes_of_Service', -'Referrals', -'Financial_Support', -`Type_of_Bill_Paid`, -`Payer_of_Support`, -'Field1', -'Field2', -'Field3') %>%
subset(Date_of_service > "2006-12-31" & Date_of_service < "2017-01-01")
group_UMD_df = final_UMD_df %>%
group_by(Client_File_Number) %>%
filter(Food_Provided_for > 0, Food_Provided_for <= 10)  %>%
summarise(max_Food_Provided_for = max(Food_Provided_for)) %>%
drop_na(max_Food_Provided_for)
group_UMD_df$Family_Size <- cut(group_UMD_df$max_Food_Provided_for, breaks = c(0,1,2,3,4,5,6,7,10), labels=c("Individual","2","3","4","5","6","7","8+"))
group_UMD_df$Indv_Family <- cut(group_UMD_df$max_Food_Provided_for, breaks = c(0,1,10), labels=c("Individual","Family"))
family_size_group_UMD_df = inner_join(group_UMD_df, final_UMD_df, by = c("Client_File_Number" = "Client_File_Number"), suffix = c(".x", ".y")) %>%
mutate(Year_of_Service = format(Date_of_service, "%Y")) %>%
group_by(Family_Size, Year_of_Service) %>%
summarise(n=n_distinct(Client_File_Number))
Indv_Family_group_UMD_df = inner_join(group_UMD_df, final_UMD_df, by = c("Client_File_Number" = "Client_File_Number"), suffix = c(".x", ".y")) %>%
mutate(Year_of_Service = format(Date_of_service, "%Y")) %>%
group_by(Indv_Family, Year_of_Service) %>%
summarise(n=n_distinct(Client_File_Number))
Durham_PIT_df = read_csv("https://raw.githubusercontent.com/datasci611/bios611-projects-fall-2019-mlfoste1/master/Project1/data/external/Durham%20County_Homeless_Point%20In%20Time.csv", na = '**')
final_PIT_df = Durham_PIT_df %>%
select('year','measures','count_') %>%
filter(measures=="Homeless Individuals" | measures=="Homeless People in Families")
final_PIT_df$Indv_Family<-NA
final_PIT_df$Indv_Family[final_PIT_df$measures=="Homeless Individuals"] <- "Individual"
final_PIT_df$Indv_Family[final_PIT_df$measures=="Homeless People in Families"] <- "Family"
final_PIT_df$Year_of_service <- cut(final_PIT_df$year, breaks = c(2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016), labels=c("2007","2008","2009","2010","2011","2012","2013","2014","2015","2016"))
final_PIT_df$n <- as.numeric(final_PIT_df$count_)
```
##Project Aims
To quantify the impact of the services provided by UMD on the homeless population in Durham County by comparing the number of reported homeless people to the number of clients serviced at UMD.
## Data Overview
The "UMD_Services_Provided_20190719.tsv" (UMD) dataset provided by the Urban Ministry of Durham. This data was compared to the Durham County Point-In-Time (PIT) dataset to evaluate the volume of clients serviced by Urban Ministry compared to the number of reported homeless people in Durham county.
The UMD dataset was reduced to dates of service occurring between 2007 and 2016 to match the date range avaialable in the PIT dataset.  The client data in UMD dataset was then categorized as "Individual" or "Family" using the "Food Provided For" variable.  Clients were assigned to "Family" if at any visit, "Food Provided For" >= 2.  NULL values at "Food Provided For" and values over 10 were excluded from the dataset.
The PIT dataset was filtered down to measures denoted as "Homeless Individuals" or "Homeless People in Families".
Of note, under the U.S. Census Bureau definition, family households consist of two or more individuals who are related by birth, marriage, or adoption, although they also may include other unrelated people. Nonfamily households consist of people who live alone or who share their residence with unrelated individuals.
See ReadMe.md for more information on data sources and project structure.
##UMD Data Summary
```{r}
renderPlot({
ggplot(group_UMD_df, aes(x=Family_Size)) +
geom_bar(aes(fill=Family_Size)) +
xlab("Family Size") +
ggtitle('Counts by Family Size (2007-2016)')
})
```
```{r}
renderPlot({
ggplot(group_UMD_df, aes(x=Indv_Family), group = Indv_Family) +
geom_bar(aes(fill=Indv_Family)) +
xlab("Family Size") +
ggtitle('Individuals Versus Families (2007-2016)')
})
```
```{r}
renderPlot({
ggplot(Indv_Family_group_UMD_df, aes(x=Year_of_Service, y=n, group=Indv_Family)) +
geom_line(aes(color=Indv_Family)) +
scale_x_discrete() +
xlab("Year_of_Service") +
ylab("Number Serviced") +
ggtitle('Individual vs Family by Year')
})
```
#PIT Data Summary
```{r}
renderPlot({
ggplot(final_PIT_df, aes(x=Indv_Family, y=n)) +
geom_bar(stat="identity", aes(fill=Indv_Family)) +
xlab("Family Size") +
ggtitle('Durham PIT - Individuals Versus Families (2007-2016)')
})
```
```{r}
renderPlot({
ggplot(final_PIT_df, aes(x=Year_of_service, y=n, group=Indv_Family)) +
geom_line(aes(color=Indv_Family)) +
scale_x_discrete() +
xlab("Year_of_Service") +
ylab("Number Serviced") +
ggtitle('Durham PIT - Total Number Serviced by Family Size by Year')
})
```
#UMD vs PIT Data Summary
```{r}
renderPlot({
ggplot(Indv_Family_group_UMD_df, aes(x=Year_of_Service, y=n, group=Indv_Family)) +
geom_line(size=1.5, aes(color=Indv_Family)) +
geom_line(data=final_PIT_df, aes(x=Year_of_service, y=n, group=Indv_Family, color=measures)) +
xlab("Year of Service") +
ylab("Number Serviced") +
ggtitle('Number of People Serviced vs Number Reported in Durham PIT Count')
})
```
##Conclusion
The number of individuals serviced by UMD and the reported number of homeless individuals in Durham County was relatively consistent as opposed to the significant gap in the number of families that are serviced by UMD and the number of reported homeless families in Durham County.  UMD services a high number of families, equating to about double the amount of individuals it services and nearly three times more families than reported in the PIT survey.  Yet, UMD provides shelter for a maximum of nine families at a time, compared to the maximum of one hundred fifteen for homeless individuals.
More accurate representation of families in the PIT survey would allow Urban Ministries to quantify their impact on the Durham community and advocate for more resources to ensure all that need assistance, recieve assistance.  Resources and iniatives should be centered around reliable data that allows for sound decision making.  Unfortunately, the PIT survey does not provide that for homeless families.
My recommendation for HUD would be to integrate more of the homeless community and service providers in its surveying process. This can be achieved by hiring people from the homeless community to assist in gathering talleys and partnering with service providers to assess the most viable approaches to collect these data.  Additionally, registration captured at time of service could assist in supplementing the yearly survey.
#More on PIT
The annual PIT counts often mobilize large numbers of volunteers and serve to educate communities about homelessness. However, despite all the community effort and goodwill that goes into them, and due to no fault of the professionals and volunteers who carry them out, the counts are severely flawed. A 2001 study using administrative data collected from homeless service providers estimated that the annual number of homeless individuals is 2.5 to 10.2 times greater than can be obtained using a point in time count.  This is due to:
+Inconsistent Methodlogy
+Most methodologies miss unsheltered homeless people
+Only some kinds of homelessness are counted. Excludes people living with familly member, in jail, or hospitalized
See "HUD-PIT-report2017.pdf" in references folder to continue reading more on the PIT survey.
#Limitations
+Current PIT count data must always be used with the explicit recognition that the data represent significant undercounts.
+Usage of year-to-year trends must include scrutiny of any methodology or classification changes that may have also occurred over the time period.
veteranstatus_race_plot = ggplot(veteranstatus_race_df, aes(x = Race, fill = VeteranStatus)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#veteranstatus_race_plot
veteranstatus_race_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#disability_plot
disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType, color=DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
disability_plot = ggplot(disability_df, aes(x = DisabilityType, color=DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
disability_plot = ggplot(disability_df, aes(x = DisabilityType, color=DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType, fill = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#disability_plot
#disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType)) +
geom_bar(fill = DisabilityType) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#load master data file
disability_df = read_csv("https://raw.githubusercontent.com/datasci611/bios611-projects-fall-2019-mlfoste1/master/Project_3/data/disability.csv", na = 'NaN')
#disability_df
disability_plot = ggplot(disability_df, aes(x = DisabilityType)) +
geom_bar(fill = DisabilityType) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType, fill = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
#disability_plot
disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType, color = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
disability_plot = ggplot(disability_df, aes(x = DisabilityType, color = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
disability_plot
disability_df
disability_plot = ggplot(disability_df, aes(x = DisabilityType, color = DisabilityType)) +
geom_bar()
disability_plot
disability_plot = ggplot(disability_df, aes(x = DisabilityType, fill() = DisabilityType)) +
geom_bar()
disability_plot = ggplot(disability_df, aes(x = DisabilityType, fill = DisabilityType)) +
geom_bar()
disability_plot = ggplot(disability_df, aes(x = DisabilityType, fill = DisabilityType)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
disability_plot
